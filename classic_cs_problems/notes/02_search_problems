------------------------------------------------------------------------------------
| CHAPTER 2 - SEARCH PROBLEMS                                                      |
------------------------------------------------------------------------------------

- Storing DNA

    - Genes are commonly represented as a series of characters ['A', 'C', 'G', 'T'], which
        each represent a nucleotide.  A group of 3 nucleotides is called a 'codon'.

      A classic task in bioinformatics software is to find a particular codon within a gene.


    - We'll represent a nucleotide using an 'IntEnum'.  We're using this instead of a regular
        enum because we get comparison operators for free.

        Nucleotide = IntEnum('Nucleotide', ('A', 'C', 'G', 'T'))


    - We can treat a gene as a list of codons.



- Linear Search

    - Linear search is O(n).

        def linear_contains(gene, key_codon):
            for codon in gene:
                if codon == key_codon:
                    return True
            return False



- Binary Search

    - We can use binary search on a sorted list.  In this case, it is O(log n).

        def binary_contains(gene, key_codon):
            low = 0
            high = len(gene) - 1
            while low <= high:
                mid = (low + high) // 2
                if gene[mid] < key_codon:
                    low = mid + 1
                elif gene[mid] > key_codon:
                    high = mid - 1
                else:
                    return True
            return False



- Representing a Maze

    - Finding a path through a maze is analagous to many common search problems.  Our maze will
        be a 2D grid of cells.

        class Cell(str, Enum):
            EMPTY = " "
            BLOCKED = "X"
            START = "S"
            GOAL = "G"
            PATH = "*"

        MazeLocation = namedtuple('MazeLocation', ['row', 'column'])



- Generating a Random Maze

    - We'll represent the state of the maze internally with a list of lists.  By default, our
        maze will be fairly sparse (20% blocked).

        class Maze:
            # Initialize the grid
            def __init__(self, rows=10, columns=10, sparseness=0.2, start=(0, 0), goal=(9, 9))

            # Randomly add blocked spaces
            def _randomly_fill(self, rows, columns, sparseness)

            # Determine whether we have reached the goal space
            def goal_test(self, m1)

            # Determines which spaces we can move to from our current space
            def successors(self, m1)