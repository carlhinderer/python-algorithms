------------------------------------------------------------------------------------
| CHAPTER 2 - SEARCH PROBLEMS                                                      |
------------------------------------------------------------------------------------

- Storing DNA

    - Genes are commonly represented as a series of characters ['A', 'C', 'G', 'T'], which
        each represent a nucleotide.  A group of 3 nucleotides is called a 'codon'.

      A classic task in bioinformatics software is to find a particular codon within a gene.


    - We'll represent a nucleotide using an 'IntEnum'.  We're using this instead of a regular
        enum because we get comparison operators for free.

        Nucleotide = IntEnum('Nucleotide', ('A', 'C', 'G', 'T'))


    - We can treat a gene as a list of codons.



- Linear Search

    - Linear search is O(n).

        def linear_contains(gene, key_codon):
            for codon in gene:
                if codon == key_codon:
                    return True
            return False



- Binary Search

    - We can use binary search on a sorted list.  In this case, it is O(log n).

        def binary_contains(gene, key_codon):
            low = 0
            high = len(gene) - 1
            while low <= high:
                mid = (low + high) // 2
                if gene[mid] < key_codon:
                    low = mid + 1
                elif gene[mid] > key_codon:
                    high = mid - 1
                else:
                    return True
            return False



- Representing a Maze

    - Finding a path through a maze is analagous to many common search problems.  Our maze will
        be a 2D grid of cells.

        class Cell(str, Enum):
            EMPTY = " "
            BLOCKED = "X"
            START = "S"
            GOAL = "G"
            PATH = "*"

        MazeLocation = namedtuple('MazeLocation', ['row', 'column'])



- Generating a Random Maze

    - We'll represent the state of the maze internally with a list of lists.  By default, our
        maze will be fairly sparse (20% blocked).

        class Maze:
            # Initialize the grid
            def __init__(self, rows=10, columns=10, sparseness=0.2, start=(0, 0), goal=(9, 9))

            # Randomly add blocked spaces
            def _randomly_fill(self, rows, columns, sparseness)

            # Determine whether we have reached the goal space
            def goal_test(self, m1)

            # Determines which spaces we can move to from our current space
            def successors(self, m1)



- Depth-First Search

    - With depth-first search, we go as deeply as we can before backtracking to the last decision
        point if it reaches a dead end.


    - We'll rely on stacks, which we'll implement using Python lists.

        class Stack:
            def __init__(self):
                self._container = []

            @property
            def empty(self):
                return not self._container

            def push(self, item):
                return self._container.append(item)

            def pop(self):
                return self._container.pop()   # LIFO

            def __repr__(self):
                return repr(self._container)


    - We'll also need a 'Node' class to keep track of how we got from one place to another as
        we search.

        class Node:
            def __init__(self, state, parent, cost, heuristic):
                self.state = state
                self.parent = parent
                self.cost = cost
                self.heuristic = heuristic

            def __lt__(self, other):
                return (self.cost + self.heuristic) < (other.cost + other.heuristic)


    - We can think of the 'Node' class as a wrapper around a state.  In the case of our maze-solving
        problem, those states are type 'MazeLocation'.



- Breadth-First Search

    - BFS always finds the shortest path by systematically looking one layer of nodes farther 
        away from the start state in each iteration of the search.


    - DFS will usually find a solution more quickly, while BFS will find the shortest path, so
        that is a trade off in choosing which to use.


    - To implement BFS, we'll need queues.  Since we'll be removing from the left end of the
        data structure (FIFO) rather that the right side (LIFO stacks), we'll be using a Python
        deque rather than a list.  A deque can efficiently pop from either side.

        class Queue:
            def __init__(self):
                self._container = Deque()

            @property
            def empty(self):
                return not self._container

            def push(self, item):
                self._container.append(item)

            def pop(self):
                self._container.popleft()      # FIFO

            def __repr__(self):
                return repr(self._container)


    - The algorithm for BFS is identical to DFS, just using a queue rather than a stack.



- A* Search

    - Like a BFS, an A* search aims to find a shortest path.  However, it uses a combination of
        a cost function and a heuristic function to get to the goal more quickly.

        The total cost is f(n).

        The cost function, g(n), examines the cost to get to a particular state.

        The heuristic function, h(n), gives an estimate of the cost to get from the state in
          question to the goal state.

        f(n) = g(n) + h(n)



- Priority Queues

    - To pick the state on the frontier with the lowest f(n), an A* search uses a priority queue
        as the data structure for it's frontier.  


    - A priority queue keeps its elements in an internal order, such that the first element popped 
        out is always the highest-priority element. (In our case, the highest-priority item is the 
        one with the lowest f( n).)


    - Usually this means the internal use of a binary heap, which results in O(lg n) pushes and 
        O(lg n) pops.


    - Python's standard library contains 'heappush()' and 'heappop()' that will take a list and
        maintain it as a binary heap.


        from heapq import heappush, heappop

        class PriorityQueue:
            def __init__(self):
                self._container = []

            @property
            def empty(self):
                return not self._container

            def push(self, item):
                heappush(self._container, item)      # In by priority

            def pop(self):
                return heappop(self._container)      # Out by priority

            def __repr__(self):
                return repr(self._container)



- Heuristics

    - A heuristic is an intuition about the way to solve a problem.  In the case of maze solving,
        it aims to choose the next location that will get us closest to the goal.


    - The Euclidean distance is the straight line distance (via the Pythagorean theorem) between
        2 points.  

        def euclidean_distance(goal):
            def distance(ml):
                xdist = ml.column - goal.column
                ydist = ml.row - goal.row
                return sqrt((xdist * xdist) + (ydist * ydist))

            return distance


    - The Manhattan distance is the distance between 2 points without using diagonals.

        def manhattan_distance(goal):
            def distance(ml):
                xdist = abs(m1.columnn - goal.column)
                ydist = abs(m1.row - goal.row)
                return (xdist + ydist)

            return distance


    - Note that using Manhattan distance will give us the best results in our maze solving, since
        we can only move vertically and horizontally.



- The A* Algorithm

    - To go from BFS to A* search, we have to make a few modifications.

        1. We need to use a priority queue as the frontier instead of a regular queue.

        2. We'll change the explored set to a dictionary, and we'll keep track of the lowest cost
             of each node we may want to visit.

        3. Some nodes may be visited twice.  If we find a new path with a lower cost, we should
             prefer the new route.


    - For the sake of simplicity, we're not taking a cost function as a parameter.  For our 
        purposes, we just assume every hop in our maze has a cost of 1.


        def astar(initial, goal_test, successors, heuristic):
            frontier = PriorityQueue()
            frontier.push(Node(initial, None, 0.0, heuristic(initial)))

            explored = {initial: 0.0}

            while not frontier.empty:
                current_node = frontier.pop()
                current_state = current_node.state

                if goal_test(current_state):
                    return current_node

                for child in successors:
                    new_cost = current_node.cost + 1         # Adding 1 assumes a grid

                    if child not in explored or explored[child] > new_cost:
                        explored[child] = new_cost
                        frontier.push(Node(child, current_node, new_cost, heuristic(child)))

            return None