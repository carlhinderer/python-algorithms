------------------------------------------------------------------------------------
| CHAPTER 3 - CONSTRAINT SATISFACTION PROBLEMS                                     |
------------------------------------------------------------------------------------

- Constraint Satisfaction Problems

    - CSPs are composed of 'variables' with possible values that fall into ranges known 
        as 'domains'.  The 'constraints' must be satisfied in order for the problems to be
        solved.


    - For an example, suppose you have to schedule a meeting with 3 people, each of whom have
        different windows of time they are available.  Scheduling problems are a classic
        example of CSPs.


    - Languages like Prolog have facilities for solving CSPs built in.  For other languages,
        we have to build out a framework ourselves.



- Building a CSP Framework

    - The constraint-satisfaction framework will use a simple backtracking search to find
        solutions to problems.  Backtracking means when you hit a wall, you go back to the
        previous decision point.

        class CSP:
            ...
            def backtracking_search(self, assignment):
                # Assignment is complete if every variable is assigned
                if len(assignment) == len(self.variables):
                    return assignment

                # Get all variables in the CSP but not in the assignment
                unassigned = [v for v in self.variables if v not in assignment]

                # Get every possible domain value of the first unassigned variable
                first = unassigned[0]
                for value in self.domains[first]:
                    local_assignment = assignment.copy()
                    local_assignment[first] = value

                    # If we're still consistent, we recurse
                    if self.consistent(first, local_assignment):
                        result = self.backtracking_search(local_assignment)

                        # If we didn't find the result, we will end up backtracking
                        if result is not None:
                            return result

                return None



- The Map Coloring Problem

    - Our first simple constraint satisfaction problem is to color each province in Australia
        with one of 3 colors.  No 2 provinces the same color touch each other.  



- The Eight Queens Problem

    - The eight queens problem poses the question of how to put 8 queens on a chessboard without
        any queen being able to attack any other queen.



- The Word Search Problem

    - A word search is a type of constraint satisfaction problem.  The variables are the words,
        and the domains are the possible locations of the words.


    - For the sake of simplicity, our word search will not have words that overlap.