4.27. Programming Exercises
--------------------------------------

10. Implement a radix sorting machine. A radix sort for base 10 integers is a mechanical sorting 
      technique that utilizes a collection of bins, one main bin and 10 digit bins. Each bin acts like 
      a queue and maintains its values in the order that they arrive. 

    The algorithm begins by placing each number in the main bin. Then it considers each value digit by 
      digit. The first value is removed and placed in a digit bin corresponding to the digit being 
      considered. For example, if the ones digit is being considered, 534 is placed in digit bin 4 and 
      667 is placed in digit bin 7. Once all the values are placed in the corresponding digit bins, the 
      values are collected from bin 0 to bin 9 and placed back in the main bin. The process continues 
      with the tens digit, the hundreds, and so on. After the last digit is processed, the main bin 
      contains the values in order.


11. Another example of the parentheses matching problem comes from hypertext markup language (HTML). In 
      HTML, tags exist in both opening and closing forms and must be balanced to properly describe a 
      web document. This very simple HTML document:

        <html>
           <head>
              <title>
                 Example
              </title>
           </head>

           <body>
              <h1>Hello, world</h1>
           </body>
        </html>

    Write a program that can check an HTML document for proper opening and closing tags.

    
12. Extend the palindrome checker to handle palindromes with spaces. For example, 'I PREFER PI' is a
      palindrome that reads the same forward and backward if you ignore the blank characters.


18. Implement the remaining operations defined in the UnorderedList ADT (append, index, pop, insert).


19. Implement a slice method for the UnorderedList class. It should take two parameters, start and stop,
      and return a copy of the list starting at the start position and going up to but not including the 
      stop position.

20. Implement the remaining operations defined in the OrderedList ADT.

21. Consider the relationship between Unordered and Ordered lists. Is it possible that inheritance could 
      be used to build a more efficient implementation? Implement this inheritance hierarchy.

22. Implement a stack using linked lists.

23. Implement a queue using linked lists.

24. Implement a deque using linked lists.

25. Design and implement an experiment that will compare the performance of a Python list with a list
      implemented as a linked list.

26. Design and implement an experiment that will compare the performance of the Python list based stack 
      and queue with the linked list implementation.

27. The linked list implementation given above is called a singly linked list because each node has a 
      single reference to the next node in sequence. An alternative implementation is known as a doubly 
      linked list. In this implementation, each node has a reference to the next node (commonly called 
      next) as well as a reference to the preceding node (commonly called back). The head reference also
      contains two references, one to the first node in the linked list and one to the last. Code this
      implementation in Python.