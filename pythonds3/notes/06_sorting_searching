-----------------------------------------------------------------------------
| CHAPTER 6 - SORTING & SEARCHING                                           |
-----------------------------------------------------------------------------

- Searching a List

    - We can just use the 'in' operator to find out if an item is present in a list.

        3 in [3, 5, 2, 4, 1]



- Sequential Search

    - A sequential search just checks each element in the list, so it is O(n).

        def unordered_sequential_search(a_list, item):
            for i in range(len(a_list)):
                if a_list[i] == item:
                    return True

            return False


    - If the list is ordered, we can stop if we get past the item's value in the list, but it is still
        O(n).

        def ordered_sequential_search(a_list, item):
            for i in range(len(a_list)):
                if a_list[i] == item:
                    return True
                elif a_list[i] > item:
                    return False

            return False



- Binary Search

    - If the list is ordered, we can use binary search to search by repeatedly splitting the list in half.
        This is O(log n).

        def binary_search(a_list, item):
            first = 0
            last = len(a_list) - 1

            while first <= last:
                midpoint = (first + last) // 2

                if a_list[midpoint] == item:
                    return True
                elif item < a_list[midpoint]:
                    last = midpoint - 1
                else:
                    first = midpoint + 1

            return False


    - The binary search is a divide-and-conquer algorithm, which breaks the problem into smaller pieces,
        then reassembles them to get the result.  We can also use a recursive implementation:

        def binary_search_rec(a_list, item):
            if len(a_list) == 0:
                return False
            else:
                midpoint = len(a_list) // 2

                if a_list[midpoint] == item:
                    return True
                elif item < a_list[midpoint]:
                    return binary_search_rec( a_list[:midpoint], item)
                else:
                    return binary_search_rec(a_list[midpoint + 1 :], item)




- Hashing

- Bubble Sort

- Selection Sort

- Insertion Sort

- Shell Sort

- Merge Sort

- Quick Sort