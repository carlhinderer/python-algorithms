--------------------------------------------------------
CH 3 - COUNTING
--------------------------------------------------------

- Sums

   - Laws of Sums

       # Multiplicative constants can be moved in or out of sums
       x*sum(S) == sum(x*y for y in S)

       # Instead of adding 2 sums, you can sum their added contents
       sum(f(i) for i in S) + sum(g(i) for i in S) == sum(f(i) + g(i) for i in S)



- A Tale of Two Tournaments

    - There are 2 types of combinatorial problems you will often see basic algorithms:

        1. Round robin = each contestant meets each of the others in turn
        2. Knockout = competitors are arranged in pairs, and the winner goes to next round


    - Shaking Hands

        - The round robin problem is also known as the handshake problem.  If there are n
            people attending a conference, and they all shake hands, how many handshakes
            are there?

            (n * (n-1)) / 2


    - The Hare and the Tortoise

        - Let's say we have n knights, and in each round only half of them go into the 
            next round.  How many rounds do we need to get a winner?

            i = log(2)(n-1)



- Pseudopolynomiality

    - There are certain algorithms with exponential running time, but look like they
        polynomial times.

      For instance, we want to check whether a number is prime.  Here is an intuitive
        solution, which is nonpolynomial.

        def is_prime(n):
            for i in range(2, n):
                if i % i == 0: return False
            return True


      It might seem like this is O(n), since we check n numbers.  However, the problem
        instance consisting of n is not n, but rather the number of bits needed to 
        encode n.

      Since it takes k = floor(log(n,2))+1 bits to encode n, this algorithm is actually 
        Θ(2**k).  That is why these algorithms are called pseudopolynomial.



- Permutations and Combinations

    - Permutations are orderings.  If n people line up, there are n! possible orderings
        of them.

    - Combinations are different subsets drawn from a set.

        C(n, k) = n! / (k! * (n-k)!)



- Recurrence Relations

    - Here is a recursive function with linear running time:

        def sum(seq, i=0):
            if i == len(seq): return 0
            return sum(seq, i+1) + seq[i]



- Examples of Recurrence Relations

    #    Recurrence             Solution        Example Applications
    ----------------------------------------------------------------------------------
    1    T(n) = T(n-1) + 1      Θ(n)            Processing a sequence
    2    T(n) = T(n-1) + n      Θ(n**2)         Handshake problem
    3    T(n) = 2T(n-1) + 1     Θ(2n)           Towers of Hanoi
    4    T(n) = 2T(n-1) + n     Θ(2n)
    5    T(n) = T(n/2) + 1      Θ(lg n)         Binary search
    6    T(n) = T(n/2) + n      Θ(n)            Randomized select, average case
    7    T(n) = 2T(n/2) + 1     Θ(n)            Tree traversal
    8    T(n) = 2T(n/2) + n     Θ(n lg n)       Sorting by divide and conquer



- The Master Theorem

    - Recurrences corresponding to many divide-and-conquer algorithms have the 
        following form (where a >= 1 and b > 1):

        T(n) = aT(n/b) + f(n)


      You have:
        - a recursive calls, 
        - each on a given percentage (1/b) of the dataset
        - In addition to the recursive calls, the algorithm does f(n) units of work



- Example: MergeSort

    - Here is an implementation of merge sort:

        def mergesort(seq):
            mid = len(seq)//2
            lft, rgt = seq[:mid], seq[mid:]
            if len(lft) > 1: lft = mergesort(lft)
            if len(rgt) > 1: rgt = mergesort(rgt)
            res = []
            while lft and rgt:
                if lft[-1] >=rgt[-1]:
                    res.append(lft.pop())
                else:
                    res.append(rgt.pop())
            res.reverse()
            return (lft or rgt) + res    


    - In each iteration, we have:

        - 2 recursive subproblems (a = 2)
        - each subproblem on half the data (b = 2)
        - Θ(n) work being done in the while loop and reverse()

      So we get the recurrence relation:

        T(n) = 2T(n/2) + Θ(n)

      We know that the running time, regardless of the input, is:

        Θ(n lg n)