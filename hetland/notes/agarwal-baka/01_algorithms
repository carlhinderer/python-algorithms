--------------------------------------------------------
CH 1 - ALGORITHMS AND DATA STRUCTURES
--------------------------------------------------------

- 3 Types of Comparison

    a == b               # a and b have the same value
    a is b               # a and b are the same object
    type(a) is type(b)   # a and b have the same type



- Functions are First Class Objects

    First class objects:
      1. Are created at runtime
      2. Can be assigned to variables
      3. Can be passed as arguments
      4. Can be returned from functions

    In Python, all objects, including functions, are first class.


    def greeting(language):
        if language == 'eng':
            return 'hello world'
        elif language == 'fr':
            return 'bonjour le monde'
        else:
            return 'language not supported'


    # Pass functions around like any other object
    >>> L = [greeting('eng'), greeting('fr'), greeting('ger')]
    >>> L[1]
    'bonjour le monde'


    # Use function as argument
    def callf(f):
        lang = 'eng'
        return f(lang)

    >>> callf(greeting)
    'hello world'



- Higher order functions

    Functions that take other functions as arguments or return functions are sometimes
      called 'higher order functions'.  Python contains 2 built-in higher-order 
      functions: 'map' and 'filter'.


    >>> L = [1, 2, 3, 4]
    >>> for item in map(lambda n: n*2, L): print(item, end=' ')
    2 4 6 8

    >>> for item in filter(lambda n: n<4, L): print(item, end=' ')
    1 2 3


    Note that most things that can be accomplished with 'map' and 'filter' can be 
      accomplished in a more readable and equally performant way with list 
      comprehensions.

    [n*2 for n in L]
    [n in L if n<4]



    An example of the usefulness of passing functions as arguments is passing a
      function as the key of the sort function:

    # Longest word in a sequence
    >>> words = str.split('The longest word in this sentence')
    >>> sorted(words, key=len)
    ['in', 'The', 'word', 'this', 'longest', 'sentence']

    # Case-sensitive sorting
    >>> L = ['A', 'b', 'a', 'C', 'c']
    >>> L.sort()
    >>> L
    ['A', 'C', 'a', 'b', 'c']

    # Case-insensitive sorting
    >>> L.sort(key=str.lower)
    >>> L
    ['A', 'a', 'b', 'C', 'c']


    # Sort more complex data structures
    >>> items = [['rice', 2.4, 8], ['flour', 1.9, 5], ['corn', 4.7, 6]]
    >>> items.sort(key=lambda item: item[1])
    >>> print(items)
    [['flour', 1.9, 5], ['rice', 2.4, 8], ['corn', 4.7, 6]]



- Generators

    Generators are functions that return one result rather than an entire sequence
      using the 'yield' statement. 


    # Builds a list of odd numbers between n and m
    def odd_list(n, m):
        L = []
        while n<m:
            L.append(n)
            n+=2
        return L

    # Generates an iterator of odd numbers between n and m
    def odd_gen(n, m):
        while n<m:
            yield n
            n+=2


    # Time the 2 functions
    >>> import time
    >>> t0 = time.time()
    >>> sum(odd_gen(1, 1000000))
    >>> gen_time = time.time() - t0
    >>> print("Time to sum an iterator: %f" % gen_time)
    Time to sum an iterator: 0.133119

    >>> t0 = time.time()
    >>> sum(odd_list(1, 1000000))
    >>> list_time = time.time() - t0
    >>> print("Time to build and sum a list: %f" % list_time)
    Time to build and sum a list: 0.191172


    Generator objects can be created and used in a way similar to list comprehensions.

    >>> L = [1, 2, 3, 4]
    >>> gen1 = (10**i for i in L)
    >>> for x in gen1: print(x, end=' ')
    10 100 1000 10000



- OOP

    class Employee:
        num_employees = 0        # Class variable

        def init(self, name):
            self.name = name     # Instance variable
            Employee.num_employees += 1



- Class methods vs static methods

    Static methods don't know anything about the class, it only deals with parameters.
    Class methods only work with the class, and its parameter is always the class itself.


    class exponentialA(object):
        base = 3

        @classmethod
        def exp(cls, x):
            return cls.base**x

        @staticmethod
        def addition(x, y):
            return x+y


    class exponentialB(exponentialA):
        base = 4


    >>> a = exponentialA()
    >>> b = a.exp(3)

    >>> b
    27
    >>> exponentialA.addition(15, 10)
    25
    >>> exponentialB.exp(3)
    64