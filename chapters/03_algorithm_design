--------------------------------------------------------
CH 3 - ALGORITHM DESIGN
--------------------------------------------------------

- There are 3 broad approaches to algorithm design

    1. Divide and conquer
    2. Greedy algorithms
    3. Dynamic programming



- Divide and Conquer Algorithms

    The divide and conquer paradigm is to break a problem into smaller and smaller
      subproblems, then solving those subproblems, and then combining the results to obtain
      a global optimal solution.  

    Common examples:
      - Binary Search
      - Merge Sort
      - Quick Sort
      - Karatsuba algorithm for fast multiplication
      - Strassen's matrix multiplication
      - Closest pair of points



- Greedy Algorithms

    Greedy algorithms often involve optimization and combinatorial problems.  The objective is 
      to obtain the best possible solutions in each step, and we try to get the local optimum 
      solution which may eventually lead us to the overall optimum solution.

    Common examples:
      - Kruskal's minimum spanning tree
      - Dijkstra's shortest path
      - Knapsack problem
      - Prim's minimum spanning tree algorithm
      - Travelling salesman problem

    For instance, the travelling salesman problem is NP-hard, so it is not possible to 
      enumerate every route that the salesman could possibly take.  So, the greedy approach
      is to always just choose the closest unvisited destination first, and hope this will 
      lead to a good-enough solution.



- Dynamic Programming

    The dynamic programming approach is useful when our subproblems overlap.  Unlike with
      divide-and-conquer, intermediate results are cached and can be used in subsequent
      operations.

    Like divide and conquer, it uses recursion.  However, the difference is that dynamic
      programming allows us to compare results at different stages.  

    Common example:
      - Matrix multiplication



- Backtracking

    Backtracking is a form of recursion that is useful for problems in which we are
      presented with a number of different options for each node.  It is a divide and conquer
      method for exhaustive searching.


    # Generate all possible arrangements of a given string and length
    def bit_str(n, s):
        if n==1: return s
        return [digit + bits for digit in bit_str(1, s) for bits in bit_str(n-1, s)]

    print(bit_str(3, 'abc'))
    ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', .....]



- The Karatsuba Algorithm for Multiplication (1962)

    If we want to multiply 2 numbers x and y, we can start by decomposing any 2 digit numbers
      x and y to be:

      x = 10**m(a) + b
      y = 10**m(c) + d

    So, we can rewrite our multiplication problem as:

        x * y
      = (10**m(a) + b) * (10**m(c) + d)
      = 10**2m(ac) + 10**m(ad + bc) + bd

      = 10**2m(z2) + 10**m(z1) + (z0)
      with
      z2 = ac
      z1 = ad + bc
      z0 = bd

    
    from math import log10 
    def karatsuba(x,y): 

        #The base case for recursion 
        if x<10 or y<10: return x*y 

        #sets n, the number of digits in the highest input number
        n=max(int(log10(x)+1), int(log10(y)+1)) 

        #rounds up n/2  
        n_2 = int(math.ceil(n/2.0))

        #adds 1 if n is uneven  
        n = n if n%2 == 0 else n+1

        #splits the input numbers 
        a, b = divmod(x, 10**n_2) 
        c, d = divmod(y,10**n_2)

        #applies the three recursive steps 
        ac = karatsuba(a,c) 
        bd = karatsuba(b,d)  
        ad_bc = karatsuba((a+b),(c+d))-ac-bd 

        #performs the multiplication 
        return (((10**n)*ac)+bd+((10**n_2)*(ad_bc)))


    t= karatsuba(1234,3456)
    print(t)

    # outputs - 4264704    