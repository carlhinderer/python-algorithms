--------------------------------------------------------
CH 5 - STACKS AND QUEUES
--------------------------------------------------------

- Stack

    All stack operations run in O(1) time.


    class Node:
        def __init__(self, data=None):
            self.data = data
            self.next = None


    class Stack:
        def __init__(self):
            self.top = None
            self.size = 0

        def push(self, data):
            node = Node(data)
            if self.top:
                node.next = self.top
                self.top = node
            else:
                self.top = node
            self.size +=1

        def pop(self):
            if self.top:
                data = self.top.data
                self.size -= 1
                if self.top.next:
                    self.top = self.top.next
                else:
                    self.top = None
                return data
            else:
                return None

        def peek(self):
            if self.top:
                return self.top.data
            else:
                return None



- Example - Bracket Matcher

    def check_brackets(statement):
        stack = Stack()
        for ch in statement:
            if ch in ('{', '[', '('):
                stack.push(ch)
            if ch in ('}', ']', ')'):
                last = stack.pop()

            if last is '{' and ch is '}':
                continue
            elif last is '[' and ch is ']':
                continue
            elif last is '(' and ch is ')':
                continue
            else:
                return False

        if stack.size > 0:
            return False
        else:
            return True



- List-based queues

    Queues can be implemented in a variety of ways, including with lists, stacks, 
      and nodes.  This is a list-based implementation:

      class ListQueue:
          def __init__(self):
              self.items = []
              self.size = 0

          def enqueue(self, data):
              self.items.insert(0, data)
              self.size += 1

          def dequeue(self):
              if self.size > 0:
                  self.size -= 1
                  return self.items.pop()


    This implementation adds new items onto the front of the list, pushing all existing 
      items back.  Dequeueing just removes the last item from the end of the list.  So, 
      enqueueing is O(n), and dequeueing is O(1).



- Stack-based queues

    Queues can be implemented using 2 stacks.  In our implementation, we use Python
      lists as the stacks and just call 'push' and 'pop' methods on them.


    class StackQueue:
        def __init__(self):
            self.inbound_stack = []
            self.outbound_stack = []

        def enqueue(self, data):
            self.inbound_stack.append(data)    # append is like a push


    # Test the enqueue
    >>> queue = StackQueue()
    >>> queue.enqueue(5)
    >>> queue.enqueue(6)
    >>> queue.enqueue(7)

    >>> print(queue.inbound_stack)
    [5, 6, 7]                                  # 7 is top of stack



- Dequeueing from stack-based queues

    We use the outbound stack for dequeues.  If the outbound stack is empty, we move
      all of the elements from the inbound stack over to it.  If the outbound stack is
      not empty, we just pop the first element off of it.  The worst-case running time
      for this is O(n).


    def dequeue(self):
        if not self.outbound_stack:
            while self.inbound_stack:
                self.outbound_stack.append(self.inbound_stack.pop())
        return self.outbound_stack.pop()



- Node-based queues

    A queue can be implemented using a double linked list.  With this implementation, 
      both enqueue and dequeue operations are done in O(1) time.


    class Node:
        def __init__(self, data=None, next=None, prev=None):
            self.data = data
            self.next = next
            self.prev = prev

    class NodeQueue:
        def __init__(self):
            self.head = None
            self.tail = None
            self.count = 0

        def enqueue(self, data):
            new_node = Node(data, None, None)
            if self.head is None:
                self.head = new_node
                self.tail = self.head
            else:
                new_node.prev = self.tail
                self.tail.next = new_node
                self.tail = new_node
            self.count += 1

        def dequeue(self):
            current = self.head
            if self.count == 1:
                self.head = None
                self.tail = None
                self.count -= 1
            elif self.count > 1:
                self.head = self.head.next
                self.head.prev = None
                self.count -= 1
            return current