--------------------------------------------------------
CH 2 - DATA TYPES AND STRUCTURES
--------------------------------------------------------

- Sequence Methods

    len(s)           # Returns number of elements in s
    min(s)           # Returns minimum value in s (alphabetical for strings)
    max(s)           # Returns maximum value in s (alphabetical for strings)
    sum(s)           # Returns sum of all elements (or TypeError if not numeric)
    all(s)           # Returns true if all elements in s are True
    any(s)           # Returns true if any element in s is True



- Sequence Operations

    s+r              # Concatenates 2 sequences
    s*n              # Makes n copies of s
    v1,..., vn = s   # Unpacks n variables from s
    s[i:j:stride]    # Returns selected elements
    x in s           # Returns true if x is in s
    x not in s       # Returns true if x is not in s



- Sequence Comparisons

    >>> L1 = [1, 2, 3, 4]
    >>> L2 = [1, 2, 3, 4]
    >>> L3 = [1, 2, 3]

    >>> L1 == L2
    True
    >>> L2 > L3
    True



- Tuples are hashable

    Tuples are hashable, since they are immutable.  This means they can be used as keys
      in dictionaries.

    # Create an empty tuple
    t = tuple()



- Dictionary methods

    len(d)                  # Total number of items in d
    d.clear()               # Removes all items
    d.copy()                # Returns shallow copy
    d.fromkeys(s[,value])   # New dictionary with keys in s and values set to value
    d.get(k[,v])            # Returns d[k] if k is found, otherwise returns v

    d.items()
    d.keys()
    d.values()

    d.pop(k[,default])      # Returns d[k] and removes it from d
    d.popitem()             # Returns a random item and removes it from d
    d.setdefault(k[,v])     # Returns d[k]. If not found, retunrs v and sets d[k] to v
    d.update(b)             # Adds all the items from to d



- Sorting dictionaries

    >>> d = {'one': 1, 'two': 2, 'three': 3, 'four': 4}

    # Sorted list of keys
    >>> sorted(list(d))
    ['four', 'one', 'three', 'two']

    # Sorted list of values
    >>> sorted(list(d.values())
    [1, 2, 3, 4]

    # Sorted list of keys according to values
    >>> sorted(list(d), key = d.__get__item)
    ['one', 'two', 'three', 'four']

    # Sort in reverse order
    >>> sorted(list(d), key = d.__get__item, reverse=True)
    ['four', 'three', 'two', 'one']

    # Use list comprehension to get sorted list of values according to keys
    >>> [value for (key, value) in sorted(d.items())]
    [4, 1, 3, 2]


    # Define a custom sorting method (sorts on last letter of the strings)
    >>> def corder(string): return(string[len(string)-1])
    >>> sorted(d, key=corder)
    ['one', 'three', 'two', 'four']



- Example - Count words in a text file using dictionary

    def wordcount(fname):
        try:
            fhand = open(fname)
        except:
            print('File cannot be opened')
            exit()

        count = dict()
        for line in hand:
            words = line.split()
            for word in words:
                if word not in count:
                    count[word] = 1
                else:
                    count[word] += 1
        return count