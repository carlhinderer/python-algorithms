--------------------------------------------------------
CH 2 - DATA TYPES AND STRUCTURES
--------------------------------------------------------

- Sequence Methods

    len(s)           # Returns number of elements in s
    min(s)           # Returns minimum value in s (alphabetical for strings)
    max(s)           # Returns maximum value in s (alphabetical for strings)
    sum(s)           # Returns sum of all elements (or TypeError if not numeric)
    all(s)           # Returns true if all elements in s are True
    any(s)           # Returns true if any element in s is True



- Sequence Operations

    s+r              # Concatenates 2 sequences
    s*n              # Makes n copies of s
    v1,..., vn = s   # Unpacks n variables from s
    s[i:j:stride]    # Returns selected elements
    x in s           # Returns true if x is in s
    x not in s       # Returns true if x is not in s



- Sequence Comparisons

    >>> L1 = [1, 2, 3, 4]
    >>> L2 = [1, 2, 3, 4]
    >>> L3 = [1, 2, 3]

    >>> L1 == L2
    True
    >>> L2 > L3
    True



- Tuples are hashable

    Tuples are hashable, since they are immutable.  This means they can be used as keys
      in dictionaries.

    # Create an empty tuple
    t = tuple()



- Dictionary methods

    len(d)                  # Total number of items in d
    d.clear()               # Removes all items
    d.copy()                # Returns shallow copy
    d.fromkeys(s[,value])   # New dictionary with keys in s and values set to value
    d.get(k[,v])            # Returns d[k] if k is found, otherwise returns v

    d.items()
    d.keys()
    d.values()

    d.pop(k[,default])      # Returns d[k] and removes it from d
    d.popitem()             # Returns a random item and removes it from d
    d.setdefault(k[,v])     # Returns d[k]. If not found, retunrs v and sets d[k] to v
    d.update(b)             # Adds all the items from to d



- Sorting dictionaries

    >>> d = {'one': 1, 'two': 2, 'three': 3, 'four': 4}

    # Sorted list of keys
    >>> sorted(list(d))
    ['four', 'one', 'three', 'two']

    # Sorted list of values
    >>> sorted(list(d.values())
    [1, 2, 3, 4]

    # Sorted list of keys according to values
    >>> sorted(list(d), key = d.__get__item)
    ['one', 'two', 'three', 'four']

    # Sort in reverse order
    >>> sorted(list(d), key = d.__get__item, reverse=True)
    ['four', 'three', 'two', 'one']

    # Use list comprehension to get sorted list of values according to keys
    >>> [value for (key, value) in sorted(d.items())]
    [4, 1, 3, 2]


    # Define a custom sorting method (sorts on last letter of the strings)
    >>> def corder(string): return(string[len(string)-1])
    >>> sorted(d, key=corder)
    ['one', 'three', 'two', 'four']



- Example - Count words in a text file using dictionary

    def wordcount(fname):
        try:
            fhand = open(fname)
        except:
            print('File cannot be opened')
            exit()

        count = dict()
        for line in hand:
            words = line.split()
            for word in words:
                if word not in count:
                    count[word] = 1
                else:
                    count[word] += 1
        return count



- Sets and Frozensets

    Sets are mutable, but the items they contain must be immutable.  This is because all built-in
      immutable types are hashable.

    Frozensets are immutable.


    Methods shared by all sets:

    len(a)
    a.copy()
    a.difference(t)
    a.intersection(t)
    a.union(t)
    a.symmetric_difference(t)  # Returns elements that are in either a or t, but not both

    a.isdisjoint(t)            # Returns True if a and t have no elements in common
    a.issubset(t)
    a.issuperset(t)


    Mutable set methods:

    s.add(item)
    s.discard(item)
    s.remove(item)
    s.pop()                    # Removes arbitrary element and returns it
    s.clear()

    s.difference_update(t)     # Removes all elements in t from s
    s.intersection_update(t)   # Removes elements from s that are not in (s | t)
    s.symmetric_difference_update(t)    # Removes elements from s that are not in (s ^ t)
    s.update(t)                # Appends all items in iterable t to s


    Frozensets:

    # A set cannot be a member of a set, since its mutable
    >>> s1 = {'a', 'b', 3, 4}
    >>> s2 = {'c', 'd', 5, 6}
    >>> s1.add(s2)
    TypeError: unhashable type: 'set'

    >>> s1.add(frozenset(s2))
    >>> s1
    {'a', 'b', 3, 4, frozenset({'c', 'd', 5, 6})}



- The 'collections' module

    namedtuple()               # Creates tuple subclasses with named fields
    deque                      # Lists with fast appends and pops at either end
    ChainMap                   # Dictionary-like class to create single view of multiple mappings
    Counter                    # Dictionary subclass for counting hashable objects
    OrderedDict                # Dictionary subclass that remembers the entry order
    defaultdict                # Dictionary subclass that calls a function to supply missing values

    UserDict                   # Wrappers for base classes so they can be subclassed
    UserList                   # (Rarely used any more since base classes can now be subclassed directly)
    UserString



- Deques

    Double-ended queues (aka deques) are list-like objects that support thread-safe, memory-efficient
      appends.  They are mutable and can be indexed into, but cannot be sliced.

    The main advantage of deques over lists is that inserting items at the beginning of a deque is
      much faster than inserting items at the beginning of a list.


    >>> from collections import deque
    >>> dq = deque('abc')
    >>> dq.append('d')
    >>> dq.appendleft('z')

    >>> dq.extend('efg')
    >>> dq.extendleft('yxw')
    >>> dq

    >>> dq.pop()
    'g'
    >>> dq.popleft()
    'w'

    # Rotate all items to the right in circular fashion
    >>> dq.rotate(2)

    # Rotate all items to the left in circular fashion
    >>> dq.rotate(-2)



- Circular buffers using deques

    The 'maxlen' optional parameter can be used to restrict the size of the deque.  In this
      example, we are populating from the right and consuming from the left.

    >>> dq = deque([], maxlen=3)
    >>> for i in range(6):
        dq.append(i)
        print(dq)

    deque([0])
    deque([0, 1])
    deque([0, 1, 2])
    deque([1, 2, 3])
    deque([2, 3, 4])
    deque([3, 4, 5])



- ChainMap objects

    The 'ChainMap' class provides a way to like multiple dictionaries (or other mappings)
      together so that they can be treated as a single object.

    >>> from collections import ChainMap
    >>> d1 = {'a': 1, 'b': 2, 'c': 3}
    >>> d2 = {'d': 4, 'e': 5}
    >>> chainmap = ChainMap(d1, d2)
    >>> chainmap
    ChainMap({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5})

    >>> chainmap.maps
    [{'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}]
    >>> chainmap['a']
    1
    >>> chainmap['e']
    5


    ChainMaps are particulary useful when we want to keep track of defaults (like for settings)
      while also keeping track of overrides.

    >>> defaults= {'theme':'Default','language':'eng','showIndex':True, 'showFooter':True}
    >>> cm= ChainMap(defaults)   #creates a chainMap with defaults configuration
    >>> cm.maps[{'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True}]
    >>> cm.values()
    ValuesView(ChainMap({'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True}))

    >>> cm2= cm.new_child({'theme':'bluesky'}) # create a new chainMap with a child that overrides the parent.
    >>> cm2['theme']  #returns the overridden theme'bluesky'
    >>> cm2.pop('theme')  # removes the child theme value
    'bluesky' 
    >>> cm2['theme']
    'Default'
    >>> cm2.maps[{}, {'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True}]
    >>> cm2.parents
    ChainMap({'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True})



- Counter objects

    'Counter' is a subclass of a dictionary where each dictionary key is a hashable object, and the
      associated value is an integer count of that object.


    Counters can be intialized by:
      1. Passing in any sequence object
      2. Passing in a dictionary
      3. Passing in a tuple of key/value pairs

    >>> from collections import Counter
    >>> c1 = Counter('anysequence')
    >>> c2 = Counter({'a': 1, 'b': 2, 'c': 3})
    >>> c3 = Counter(a=1, b=2, c=3)


    We can also create an empty counter and update it by passing in an iterable or dictionary.
      Note that the 'update' method adds to counts rather than replacing them.

    >>> ct = Counter()
    >>> ct
    Counter()

    >>> ct.update('abca')
    >>> ct
    Counter({'a': 2, 'b': 1, 'c': 1})

    >>> ct.update({'a': 3})
    >>> ct
    Counter({'a': 5, 'b': 1, 'c': 1})

    >>> for item in ct:
            print('%s: %d' % (item, ct[item]))
    a: 5
    b: 1
    c: 1

    # If an item is not in the Counter, it will return 0 rather than an error
    >>> ct['x']
    0

    # Also note that counts can be negative
    >>> ct.update({'a': -3, 'b': -2, 'e': 2})
    >>> ct
    Counter({'a': 2, 'b': -1, 'c': 1, 'e': 2})

    # A sorted list of keys can be returned
    >>> sorted(ct.elements())
    ['a', 'a', 'c', 'e', 'e']

    # Sort items by count
    >>> ct.most_common()
    [('a', 2), ('e', 2), ('c', 1), ('b', -1)]

    # Subtract counts directly
    >>> ct.subtract({'e': 2})
    >>> ct
    Counter({'a': 2, 'b': -1, 'c': 1, 'e': 0})



- Ordered dictionaries

    OrderedDicts remember the order in which elements were inserted, so when we iterate
      over them, they return values in the order in which they were inserted.

    >>> from collections import OrderedDict
    >>> od1 = OrderedDict()
    >>> od1['one'] = 1
    >>> od1['two'] = 2

    >>> od2 = OrderedDict()
    >>> od2['two'] = 2
    >>> od2['one'] = 1

    >>> od1 == od2
    False



- defaultdict

    The 'defaultdict' provides an easy wasy to initialize dictionaries.  The 'defaultdict'
      overrides the behavior when trying to access a missing key (the 'missing(key)' method), 
      and creates a new instance variable, 'default_factory'.

    >>> from collections import defaultdict
    >>> dd = defautldict(int)


    Note that no KeyErrors are generated when we insert the dictionary entries.  With a normal
      dictionary, we'd need to test and check whether each key is present before inserting it.

    >>> words = str.split('red blue green red yellow blue red green green red')
    >>> for word in words: dd[word] +=1
    >>> dd
    defaultdict(<class 'int'>, {'red': 4, 'blue': 2, 'green': 3, 'yellow': 1})



- Named Tuples

    The 'namedtuple' method returns a tuple-like object that has fields accessible with named
      indexes as well as the integer indexes of normal tuples.

    # Field names are passed in as comma- or whitespace-separated values
    >>> from collections import namedtuple
    >>> space = namedtuple('space', 'x y z')
    >>> s1 = space(x=2.0, y=4.0, z=10)
    >>> s1
    space(x=2.0, y=4.0, z=10)

    # Access elements by name
    >>> s1.x * s1.y * s1.z
    80.0

    # Access elements by position
    >>> s1._0 * s1._1 * s1._2
    80.0

    # Pass in a sequence of values using the '_make' method
    >>> sl = [4, 5, 6]
    >>> space._make(sl)
    space(x=4, y=5, z=6)

    # The '_asdict' method will return an OrderedDict
    >>> s1._asdict()
    OrderedDict([('x', 4), ('y', 5), ('z', 6)])

    # The '_replace' method returns a new instance of the tuple, with updated values
    >>> s1._replace(x=7, z=9)
    space(x=7, y=5, z=9)

    # Get fields
    >>> space._fields
    ('x', 'y', 'z')