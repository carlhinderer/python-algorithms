--------------------------------------------------------
CH 2 - THE BASICS
--------------------------------------------------------

- Core Ideas in Computing

    - Alan Turing, mid 1930s

        'On computable numbers, with an application to the Entscheidungsproblem'

        - A Turing machine can read from, write to, and move along an infinitely
            long strip of paper.  Each implementation of the machine is a 
            Finite State Machine.


    - An 'algorithm' is a procedure consisting of a finite set op steps, possibly
        including loops and conditionals, that solves a given problem.  A 'Turing
        machine' is a formal description of exactly what problem the algorithm
        solves.  


    - For modern machines, we assume we can access memory directly in a random-access
        fashion, rather than scrolling along a paper tape.  We assume that modern
        machines have these constraints:

        1. The machine executes instructions on after another.  We don't have access
             to any form of concurrent execution.

        2. Standard, basic operations like arithmetic, comparison, and memory access
             all take constant time.

        3. One computer word is not unlimited, but is big enough to address all the
             memory locations used to represent our problem.


    - We can often define the input and outputs of our algorithm in terms of relations.
        A relation (in the mathematical sense) is a set of pairs.

      For instance, the problem of sorting may be specified as a relations between
        2 sets A and B, each consisting of sequences.



- Black Box: Lists

    - Note that Python lists are actually arrays.  If you did want to make a linked
        list in Python:

        # Singly linked list
        class Node:
            def __init__(self, value, next=None):
                self.value = value
                self.next = next


        # Use the list
        >>> L = Node('a', Node('b', Node('c', Node('d'))))
        >>> L.next.next.value
        'c'


    - Python lists being implemented as arrays is the reason inserting at the left side 
        of the array is quadratic time.  We have to move all the elements to the right 
        first (linear), then insert the element at the beginning.  

      Specifically, Python lists are dynamic arrays, which grow as more elements are added.
        The ideally is to initially allocate an array that is too big, and reallocate it
        in linear time whenever it overflows.  We don't have to do this on every append,
        so we can amortize the cost of resizing based on how often it occurs.



- Asymptotics

    - O(n)     Upper Bound
      Ω(n)     Lower Bound
      Θ(n)     Tight Bound


    - Common Asymptotic Running Times

        Complexity        Name            Examples, Comments
        --------------------------------------------------------------
        Θ(1)              Constant        Hash table lookup and modification (see 
                                            “Black Box” sidebar on dict).

        Θ(lg n)           Logarithmic     Binary search. Logarithm base unimportant.

        Θ(n)              Linear          Iterating over a list.

        Θ(n lg n)         Loglinear       Optimal sorting of arbitrary values. Same 
                                            as Θ(lg n!).

        Θ(n2)             Quadratic       Comparing n objects to each other.

        Θ(n3)             Cubic           Floyd and Warshall’s algorithms.

        O(nk)             Polynomial      k nested for loops over n (if k is a positive 
                                            integer). For any constant k > 0.

        Ω(kn)             Exponential     Producing every subset of n items. Any k > 1.

        Θ(n!)             Factorial       Producing every ordering of n values.



    - The polynomial and exponential classes are special, since they separate tractable
        and intractable problems.  Basically, an algorithm with a polynomial running time
        is considered feasible, while an exponential one is generally useless.



- Example - Determining Complexity

    - Find the complexity of:

        nums.append(1)
        nums.insert(0, 2)


    - For the individual lines:

        nums.append(1)         # O(1) time
        nums.insert(0, 2)      # O(n) time

      For the statements together:

        O(1) + O(n) = O(n



- Example - Determining Complexity with Loops

    - Find the complexity of:

        sum = 0
        for x in range(n):
            sum += x


    - For the individual lines:

        sum = 0                # O(1)
        for x in range(n):     # n loop iterations
            sum += x           # O(1)

      For the statements together:

        O(1) + n O(1) = O(n)



- Complexity in Loops

    - For nested loops:

        for x in range(n):
            for y in range(n):
                for z in range(n):
                    s += (x+y-z)

      Running time:

        O(n) * O(n) * O(n) = O(n**3)


    - Remember, when analyzing running times, that there all hidden loops all over the
        place in Python.

        # Hidden loop here
        squares = [x**2 for x in range(n)]



- Three Important Cases

    1. Best Case
         Input is optimally suited to your algorithm 

    2. Worst Case
         The worst possible running time, usually the most useful case

    3. Average Case
         Expected value of the running time, for random input.



- Tips For Empirical Evaluation of Algorithms

    1. Unless it is critical to the problem you are solving, don't worry about
         running time.  The vast majority of problems can be solved sufficiently
         with brute-force approaches.


    2. For timing things, use timeit.

         >>> import timeit
         >>> timeit.timeit("x = 2 + 2")
         >>> timeit.timeit("x = sum(range(10))")


    3. To find bottlenecks, use a profiler.

         >>> import cProfile
         >>> cProfile.run('main()')


    4. Plot your results to visualize your algorithm's performance.



- Graphs and Trees

    - Graphs are used to represent all kinds of structures and systems, like:

        - Transportation and communication networks
        - Protein interactions in cell nuclei
        - Human interactions online


    - You can increase the expressiveness by adding extra data such as weights and
        distances.  This makes it possible to represent such diverse problems as
        playing chess or matching jobs to candidates.


    - Graph Basics

        1. A graph G = (V, E) consists of 
             V, a set of vertices and
             E, the set of edges between them

           If the edges have a direction, we say the graph is directed.


        2. Nodes with an edge between them are 'adjacent'.
           The edge is 'incident' to both of them.
           Nodes adjacent to a vertex are 'neighbors' of the vertex.
           The 'degree' of a node is the number of edges incident to it.


        3. A subgraph of G = (V, E) consists of a subset of V and a subset of E.
           A 'path' in G is a subgraph where the edges connect the nodes in a
             sequence, without revisiting any node.
           A 'cycle' is like a path, except the last edge links the last node to 
             the first.


        4. If we associate a 'weight' with each edge in G, we say that G is a
             'weighted graph'.  The 'length' of a path or cycle is the sum of its
             edge weights (or just the number of edges if the edges are unweighted).


        5. A 'forest' is a cycle-free graph, and a connected forest is a 'tree'.  In
             other words, a forest consists of one or more trees.



- Black Box: Dict and Set

    - 'Hashing' involves computing an integer value from an arbitrary object.
        This value can then be used as an index into an array, for example.

      The standard hashing mechanism in Python is available through the 'hash'
        function.

        >>> hash(42)
        42

        >>> hash('Hello, world!')
        -1886531940


    - Dictionaries and sets are implemented using hash tables.  The hash value can
        be constructed in constant time.  So, we can assume that accessing elements
        of a 'dict' or 'set' can be expected to take constant time.



- Adjacency Lists

    - For each node, we can access a list of its neighbors.

        # Simple adjacency list representation
        >>> a, b, c, d, e, f, g, h = range(8)

        # Represents nodes with sets
        >>> N = [
                {b, c, d, e, f},    # a
                {c, e},             # b
                {d},                # c
                {e},                # d
                {f},                # e
                {c, g, h},          # f
                {f, h},             # g
                {f, g}              # h
            ]

        # Neighborhood membership
        >>> b in N[a]
        True

        # Degree
        >>> len(N[f])
        3


    - We could also use lists instead of sets to represent's each node's neighbors.
        The same operations are available, but membership checking is now O(n).

      This is a significant slowdown, but is only a problem if you need membership
        checking.  If you don't, using lists will be more efficient since they have
        less overhead.

        >>> N = [
                [b, c, d, e, f],    # a
                [c, e],             # b
                [d],                # c
                [e],                # d
                [f],                # e
                [c, g, h],          # f
                [f, h],             # g
                [f, g]              # h
            ]


    - A recurring theme when working with graphs is that the best representation 
        depends on what you need to do with your graph.  

      For instance, using lists for neighbors allows you to efficiently iterate over
        any node's neighbors.  However, checking whether u and v are neighbors
        is linear in their degrees, which may be problematic if the graph is dense.
        If the graph is dense, sets may be better.


    - We could also use dicts instead of sets or lists to store the node neighbors.
        This allows us to associate some extra value, such as weight, to each edge.

        >>> N = [
                {b:2, c:1, d:3, e:9, f:4},    # a
                {c:4, e:3},                   # b
                {d:8},                        # c
                {e:7},                        # d
                {f:5},                        # e
                {c:2, g:2, h:2},              # f
                {f:1, h:6},                   # g
                {f:9, g:8}                    # h
            ]

        # Neighborhood membership
        >>> b in N[a]
        True

        # Degree
        >>> len(N[f])
        3

        # Edge weight for (a, b)
        >>> N[a][b]
        2


    - So far, we have used a list for the set of adjacency structures.  We could use a
        dict for that too, if we want.

        >>> N = {
                'a': set('bcdef'),
                'b': set('ce'),
                'c': set('d'),
                'd': set('e'),
                'e': set('f'),
                'f': set('cgh'),
                'g': set('fh'),
                'h': set('fg')
            }



- Adjacency Matrices

    - Adjacency matrices are the other common form of graph representation.  Instead
        of listing all the neighbors for each node, we have a row with one position
        for each possible neighbor.


        # Adjacency Matrix implemented with nested lists
        >>> a, b, c, d, e, f, g, h = range(8)

        >>> N = [[0,1,1,1,1,1,0,0], # a
                 [0,0,1,0,1,0,0,0], # b
                 [0,0,0,1,0,0,0,0], # c
                 [0,0,0,0,1,0,0,0], # d
                 [0,0,0,0,0,1,0,0], # e
                 [0,0,1,0,0,0,1,1], # f
                 [0,0,0,0,0,1,0,1], # g
                 [0,0,0,0,0,1,1,0]] # h

        # Neighborhood membership
        >>> N[a][b]
        1

        # Degree
        >>> sum(N[f])
        3


    - Adjacency matrices have some useful properties.

        1. The diagonal is all false (unless self-cycles are allowed).

        2. If the graph is undirected, the matrix is symmetric.

        3. If you do need to add edge weights, it is simple to do so.


    - Sometimes, we can represent non-edges with zero.  Other times, zero is in
        our edge weights, so we must use an alternate value.

        >>> a, b, c, d, e, f, g, h = range(8)
        >>> inf = float('inf')

        >>> W = [[  0,   2,   1,   3,   9,   4, inf, inf], # a
                 [inf,   0,   4, inf,   3, inf, inf, inf], # b
                 [inf, inf,   0,   8, inf, inf, inf, inf], # c
                 [inf, inf, inf,   0,   7, inf, inf, inf], # d
                 [inf, inf, inf, inf,   0,   5, inf, inf], # e
                 [inf, inf,   2, inf, inf,   0,   2,   2], # f
                 [inf, inf, inf, inf, inf,   1,   0,   6], # g
                 [inf, inf, inf, inf, inf,   9,   8,   0]] # h

        # Neighborhood membership
        >>> W[a][b] < inf
        True

        # Neighborhood membership
        >>> W[c][e] < inf
        False

        # Degree
        >>> sum(1 for w in W[a] if w < inf) - 1
        5



- Special-Purpose Arrays with Numpy

    - The NumPy array type is quite useful and has a lot of functionality 
        related to multidimensional arrays.

        >>> import numpy as np
        >>> N = np.zeros([10, 10])



- Implementing Trees

    - There are many graph operations (such as searching) that can be implemented
        easier with specialized tree structures.

        # Represent a tree with a list of lists
        >>> T = [["a", "b"], ["c"], ["d", ["e", "f"]]]

        >>> T[0][1]
        'b'

        >>> T[2][1][0]
        'e'



- Binary Tree Class

    # Binary tree implementation
    class Tree:
        def __init__(self, left, right):
            self.left = left
            self.right = right

    # Use the binary tree
    >>> t = Tree(Tree("a", "b"), Tree("c", "d"))
    >>> t.right.left
    'c'



- Multiway Tree Class

    # Multiway tree implementation
    class Tree:
        def __init__(self, kids, next=None):
            self.kids = self.val = kids
            self.next = next

    # Use the multiway tree
    >>> t = Tree(Tree("a", Tree("b", Tree("c", Tree("d")))))
    >>> t.kids.next.next.val
    'c'



- The Bunch Pattern

- A Multitude of Representations

- Graph Libraries

- Beware of Black Boxes

- Hidden Squares

- The Trouble with Floats